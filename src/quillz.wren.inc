const char *quillz_module_src =
"\n"
"class GL {\n"
"	static POINTS { 0x0000 }\n"
"	static LINES { 0x0001 }\n"
"	static LINE_STRIP { 0x0002 }\n"
"	static LINE_LOOP { 0x0003 }\n"
"	static TRIANGLES { 0x0004 }\n"
"	static TRIANGLE_STRIP { 0x0005 }\n"
"	static TRIANGLE_FAN { 0x0006 }\n"
"	static QUADS { 0x0007 }\n"
"	static QUAD_STRIP { 0x0008 }\n"
"	static POLYGON { 0x0009 }\n"
"}\n"
"\n"
"class Sketch {\n"
"	setup() {}\n"
"	draw() {}\n"
"	\n"
"	map(x, start, stop, newStart, newStop) { (x-start)/(stop-start) * (newStop-newStart) + newStart }\n"
"	normalize(x, start, stop) { (x-start)/(stop-start) }\n"
"	\n"
"	foreign background_(r, g, b, a)\n"
"	background(r, g, b, a) {\n"
"		if (!(r is Num) || r < 0 || r > 255 ||\n"
"			!(g is Num) || g < 0 || g > 255 ||\n"
"			!(b is Num) || b < 0 || b > 255 ||\n"
"			!(a is Num) || a < 0 || a > 255) {\n"
"			Fiber.abort(\"background() expects r,g,b,a to be numbers from the range 0..255\")\n"
"		}\n"
"		return background_(r/255, g/255, b/255, a/255)\n"
"	}\n"
"	background(r, g, b) { background(r, g, b, 255) }\n"
"	background(lightness, alpha) { background(lightness, lightness, lightness, alpha) }\n"
"	background(lightness) { background(lightness, lightness, lightness, 255) }\n"
"	\n"
"	foreign begin_(mode)\n"
"	begin(mode) {\n"
"		if (!(mode is Num) || !mode.isInteger || mode < GL.POINTS || mode > GL.POLYGON) {\n"
"			Fiber.abort(\"begin() expects a valid mode\")\n"
"		}\n"
"		return begin_(mode)\n"
"	}\n"
"	\n"
"	foreign day()\n"
"	\n"
"	foreign end()\n"
"	\n"
"	foreign height\n"
"	\n"
"	foreign hour()\n"
"	\n"
"	foreign minute()\n"
"	\n"
"	foreign month()\n"
"	\n"
"	foreign second()\n"
"	\n"
"	foreign size_(width, height)\n"
"	size(width, height) {\n"
"		if (!(width is Num) || !width.isInteger) {\n"
"			Fiber.abort(\"size() expects width to be an integer\")\n"
"		} else if (!(height is Num) || !height.isInteger) {\n"
"			Fiber.abort(\"size() expects height to be an integer\")\n"
"		}\n"
"		return size_(width, height)\n"
"	}\n"
"	\n"
"	foreign sleep_(seconds)\n"
"	sleep(seconds) {\n"
"		if (!(seconds is Num) || seconds < 0) {\n"
"			Fiber.abort(\"sleep() expects a non-negative number\")\n"
"		}\n"
"		return sleep_(seconds)\n"
"	}\n"
"	\n"
"	foreign title_(title)\n"
"	title(title) {\n"
"		if (!(title is String)) {\n"
"			Fiber.abort(\"title() expects a string\")\n"
"		}\n"
"		return title_(title)\n"
"	}\n"
"	\n"
"	foreign vertex_(x, y, z)\n"
"	vertex(x, y, z) {\n"
"		if (!(x is Num) || !(y is Num) || !(z is Num)) {\n"
"			Fiber.abort(\"vertex() expects numbers\")\n"
"		}\n"
"		// x = (x - width/2)/(width/2) = 2*(x - width/2)/width = (2*x - width)/width\n"
"		x = (2*x - width)/width\n"
"		y = -(2*y - height)/height\n"
"		return vertex_(x, y, z)\n"
"	}\n"
"	vertex(x, y) { vertex(x, y, 0) }\n"
"	\n"
"	foreign width\n"
"	\n"
"	foreign weekDay()\n"
"	\n"
"	foreign year()\n"
"}\n"
;
